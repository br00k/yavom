<?php

/**
 * BasePrincipal
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $fedid
 * @property Doctrine_Collection $Role
 * @property Doctrine_Collection $Organization
 * @property Doctrine_Collection $RolePrincipal
 * @property Doctrine_Collection $OrganizationPrincipal
 * @property Doctrine_Collection $Service
 * @property Doctrine_Collection $ServicePrincipal
 * @property Doctrine_Collection $Invitation
 * @property Doctrine_Collection $ServiceInvitation
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method string              getFedid()                 Returns the current record's "fedid" value
 * @method Doctrine_Collection getRole()                  Returns the current record's "Role" collection
 * @method Doctrine_Collection getOrganization()          Returns the current record's "Organization" collection
 * @method Doctrine_Collection getRolePrincipal()         Returns the current record's "RolePrincipal" collection
 * @method Doctrine_Collection getOrganizationPrincipal() Returns the current record's "OrganizationPrincipal" collection
 * @method Doctrine_Collection getService()               Returns the current record's "Service" collection
 * @method Doctrine_Collection getServicePrincipal()      Returns the current record's "ServicePrincipal" collection
 * @method Doctrine_Collection getInvitation()            Returns the current record's "Invitation" collection
 * @method Doctrine_Collection getServiceInvitation()     Returns the current record's "ServiceInvitation" collection
 * @method Principal           setId()                    Sets the current record's "id" value
 * @method Principal           setFedid()                 Sets the current record's "fedid" value
 * @method Principal           setRole()                  Sets the current record's "Role" collection
 * @method Principal           setOrganization()          Sets the current record's "Organization" collection
 * @method Principal           setRolePrincipal()         Sets the current record's "RolePrincipal" collection
 * @method Principal           setOrganizationPrincipal() Sets the current record's "OrganizationPrincipal" collection
 * @method Principal           setService()               Sets the current record's "Service" collection
 * @method Principal           setServicePrincipal()      Sets the current record's "ServicePrincipal" collection
 * @method Principal           setInvitation()            Sets the current record's "Invitation" collection
 * @method Principal           setServiceInvitation()     Sets the current record's "ServiceInvitation" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     gyufi@sztaki.hu
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePrincipal extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('principal');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('fedid', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 255,
             ));

        $this->option('orderBy', 'fedid');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Role', array(
             'refClass' => 'RolePrincipal',
             'local' => 'principal_id',
             'foreign' => 'role_id'));

        $this->hasMany('Organization', array(
             'refClass' => 'OrganizationPrincipal',
             'local' => 'principal_id',
             'foreign' => 'organization_id'));

        $this->hasMany('RolePrincipal', array(
             'local' => 'id',
             'foreign' => 'principal_id'));

        $this->hasMany('OrganizationPrincipal', array(
             'local' => 'id',
             'foreign' => 'principal_id'));

        $this->hasMany('Service', array(
             'local' => 'id',
             'foreign' => 'principal_id'));

        $this->hasMany('ServicePrincipal', array(
             'local' => 'id',
             'foreign' => 'principal_id'));

        $this->hasMany('Invitation', array(
             'local' => 'id',
             'foreign' => 'principal_id'));

        $this->hasMany('ServiceInvitation', array(
             'local' => 'id',
             'foreign' => 'principal_id'));
    }
}